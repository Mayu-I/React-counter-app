{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","totalCounters","className","aria-hidden","style","width","Counter","getBadgeClasses","classes","props","counter","value","formatCount","fontSize","this","onClick","onIncrement","onDecrement","disabled","onDelete","id","Component","Counters","onReset","counters","onRestart","length","map","key","App","state","handleIncrement","index","indexOf","setState","handleDecrement","handleReset","c","handleDelete","counterId","filter","handleRestart","window","location","reload","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mOAgBeA,EAdA,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACd,OACI,yBAAKC,UAAU,gCACX,yBAAKA,UAAU,gBACX,uBAAGA,UAAU,gCAAgCC,cAAY,SACzD,0BAAMD,UAAU,kCAAkCE,MAAO,CAAEC,MAAO,KAC7DJ,GAHT,WC4CGK,E,4MAZXC,gBAAkB,WACd,IAAIC,EAAU,mBAEd,OADAA,GAAwC,IAA7B,EAAKC,MAAMC,QAAQC,MAAc,UAAY,W,EAI5DC,YAAc,WAAO,IACTD,EAAU,EAAKF,MAAMC,QAArBC,MACR,OAAiB,IAAVA,EAAc,OAASA,G,uDA1CxB,IAAD,OACL,OACI,6BACI,yBAAKT,UAAU,OACX,yBAAKA,UAAU,YACX,0BAAME,MAAO,CAAES,SAAU,IAAMX,UAAWY,KAAKP,mBAC1CO,KAAKF,gBAGd,yBAAKV,UAAU,YACX,4BACIA,UAAU,oBACVa,QAAS,kBAAM,EAAKN,MAAMO,YAAY,EAAKP,MAAMC,WAEjD,uBAAGR,UAAU,oBAAoBC,cAAY,UAEjD,4BACID,UAAU,mBACVa,QAAS,kBAAM,EAAKN,MAAMQ,YAAY,EAAKR,MAAMC,UACjDQ,SAAuC,IAA7BJ,KAAKL,MAAMC,QAAQC,MAAc,WAAa,IAExD,uBAAGT,UAAU,qBAAqBC,cAAY,UAElD,4BACID,UAAU,iBACVa,QAAS,kBAAM,EAAKN,MAAMU,SAAS,EAAKV,MAAMC,QAAQU,MACtD,uBAAGlB,UAAU,gBAAgBC,cAAY,iB,GA3B/CkB,aCyCPC,E,uKAvCD,IAAD,EAQDR,KAAKL,MANLc,EAFC,EAEDA,QACAP,EAHC,EAGDA,YACAG,EAJC,EAIDA,SACAF,EALC,EAKDA,YACAO,EANC,EAMDA,SACAC,EAPC,EAODA,UAEJ,OACI,6BACI,4BACIvB,UAAU,sBACVa,QAASQ,EACTL,SAA8B,IAApBM,EAASE,OAAe,WAAa,IAE/C,uBAAGxB,UAAU,gBAAgBC,cAAY,UAE7C,4BACID,UAAU,sBACVa,QAASU,EACTP,SAA8B,IAApBM,EAASE,OAAe,WAAa,IAE/C,uBAAGxB,UAAU,gBAAgBC,cAAY,UAE5CqB,EAASG,KAAI,SAAAjB,GAAO,OACjB,kBAAC,EAAD,CACIkB,IAAKlB,EAAQU,GACbV,QAASA,EACTM,YAAaA,EACbC,YAAaA,EACbE,SAAUA,Y,GAhCXE,aCoERQ,E,4MAlEbC,MAAQ,CACNN,SAAU,CACR,CAAEJ,GAAI,EAAGT,MAAO,GAChB,CAAES,GAAI,EAAGT,MAAO,GAChB,CAAES,GAAI,EAAGT,MAAO,GAChB,CAAES,GAAI,EAAGT,MAAO,K,EAIpBoB,gBAAkB,SAAArB,GAChB,IAAMc,EAAQ,YAAO,EAAKM,MAAMN,UAC1BQ,EAAQR,EAASS,QAAQvB,GAC/Bc,EAASQ,GAAT,eAAuBR,EAASQ,IAChCR,EAASQ,GAAOrB,QAChB,EAAKuB,SAAS,CAAEV,c,EAGlBW,gBAAkB,SAAAzB,GAChB,IAAMc,EAAQ,YAAO,EAAKM,MAAMN,UAC1BQ,EAAQR,EAASS,QAAQvB,GAC/Bc,EAASQ,GAAT,eAAuBR,EAASQ,IAChCR,EAASQ,GAAOrB,QAChB,EAAKuB,SAAS,CAAEV,c,EAGlBY,YAAc,WACZ,IAAMZ,EAAW,EAAKM,MAAMN,SAASG,KAAI,SAAAU,GAEvC,OADAA,EAAE1B,MAAQ,EACH0B,KAET,EAAKH,SAAS,CAAEV,c,EAGlBc,aAAe,SAAAC,GACb,IAAMf,EAAW,EAAKM,MAAMN,SAASgB,QAAO,SAAAH,GAAC,OAAIA,EAAEjB,KAAOmB,KAC1D,EAAKL,SAAS,CAAEV,c,EAGlBiB,cAAgB,WACdC,OAAOC,SAASC,U,uDAKhB,OACE,6BACE,kBAAC,EAAD,CACE3C,cAAea,KAAKgB,MAAMN,SAASgB,QAAO,SAAAH,GAAC,OAAIA,EAAE1B,MAAQ,KAAGe,SAE9D,0BAAMxB,UAAU,aACd,kBAAC,EAAD,CACEsB,SAAUV,KAAKgB,MAAMN,SACrBD,QAAST,KAAKsB,YACdpB,YAAaF,KAAKiB,gBAClBd,YAAaH,KAAKqB,gBAClBhB,SAAUL,KAAKwB,aACfb,UAAWX,KAAK2B,sB,GAzDVpB,a,YCQEwB,QACW,cAA7BH,OAAOC,SAASG,UAEe,UAA7BJ,OAAOC,SAASG,UAEhBJ,OAAOC,SAASG,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.7e9970c5.chunk.js","sourcesContent":["import React from \"react\";\n\nconst NavBar = ({ totalCounters }) => {\n    return (\n        <nav className=\"navbar navbar-light bg-light\">\n            <div className=\"navbar-brand\">\n                <i className=\"fa fa-shopping-cart fa-lg m-2\" aria-hidden=\"true\"></i>\n                <span className=\"badge badge-pill badge-info m-2\" style={{ width: 50 }}>\n                    {totalCounters}\n                </span>\n                Items\n            </div>\n        </nav>\n    );\n};\n\nexport default NavBar;","import React, { Component } from \"react\";\n\nclass Counter extends Component {\n    render() {\n        return (\n            <div>\n                <div className=\"row\">\n                    <div className=\"col-md-1\">\n                        <span style={{ fontSize: 24 }} className={this.getBadgeClasses()}>\n                            {this.formatCount()}\n                        </span>\n                    </div>\n                    <div className=\"col-md-4\">\n                        <button\n                            className=\"btn btn-secondary\"\n                            onClick={() => this.props.onIncrement(this.props.counter)}\n                        >\n                            <i className=\"fa fa-plus-circle\" aria-hidden=\"true\" />\n                        </button>\n                        <button\n                            className=\"btn btn-info m-2\"\n                            onClick={() => this.props.onDecrement(this.props.counter)}\n                            disabled={this.props.counter.value === 0 ? \"disabled\" : \"\"}\n                        >\n                            <i className=\"fa fa-minus-circle\" aria-hidden=\"true\" />\n                        </button>\n                        <button\n                            className=\"btn btn-danger\"\n                            onClick={() => this.props.onDelete(this.props.counter.id)}>\n                            <i className=\"fa fa-trash-o\" aria-hidden=\"true\"></i>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    getBadgeClasses = () => {\n        let classes = \"badge m-2 badge-\";\n        classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\n        return classes;\n    };\n\n    formatCount = () => {\n        const { value } = this.props.counter;\n        return value === 0 ? \"Zero\" : value;\n    };\n}\n\nexport default Counter;","import React, { Component } from \"react\";\nimport Counter from \"./counter\";\n\nclass Counters extends Component {\n    render() {\n        const {\n            onReset,\n            onIncrement,\n            onDelete,\n            onDecrement,\n            counters,\n            onRestart\n        } = this.props;\n        return (\n            <div>\n                <button\n                    className=\"btn btn-success m-2\"\n                    onClick={onReset}\n                    disabled={counters.length === 0 ? \"disabled\" : \"\"}\n                >\n                    <i className=\"fa fa-refresh\" aria-hidden=\"true\"></i>\n                </button>\n                <button\n                    className=\"btn btn-primary m-2\"\n                    onClick={onRestart}\n                    disabled={counters.length !== 0 ? \"disabled\" : \"\"}\n                >\n                    <i className=\"fa fa-recycle\" aria-hidden=\"true\"></i>\n                </button>\n                {counters.map(counter => (\n                    <Counter\n                        key={counter.id}\n                        counter={counter}\n                        onIncrement={onIncrement}\n                        onDecrement={onDecrement}\n                        onDelete={onDelete}\n                    />\n                ))}\n            </div>\n        );\n    }\n}\n\nexport default Counters;","import React, { Component } from 'react';\nimport NavBar from \"./components/navbar\";\nimport Counters from \"./components/counters\";\n\nclass App extends Component {\n  state = {\n    counters: [\n      { id: 1, value: 0 },\n      { id: 2, value: 0 },\n      { id: 3, value: 0 },\n      { id: 4, value: 0 },\n    ]\n  };\n\n  handleIncrement = counter => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counters[index] };\n    counters[index].value++;\n    this.setState({ counters });\n  };\n\n  handleDecrement = counter => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counters[index] };\n    counters[index].value--;\n    this.setState({ counters });\n  };\n\n  handleReset = () => {\n    const counters = this.state.counters.map(c => {\n      c.value = 0;\n      return c;\n    });\n    this.setState({ counters });\n  };\n\n  handleDelete = counterId => {\n    const counters = this.state.counters.filter(c => c.id !== counterId);\n    this.setState({ counters });\n  };\n\n  handleRestart = () => {\n    window.location.reload();\n  };\n\n\n  render() {\n    return (\n      <div>\n        <NavBar\n          totalCounters={this.state.counters.filter(c => c.value > 0).length}\n        />\n        <main className=\"container\">\n          <Counters\n            counters={this.state.counters}\n            onReset={this.handleReset}\n            onIncrement={this.handleIncrement}\n            onDecrement={this.handleDecrement}\n            onDelete={this.handleDelete}\n            onRestart={this.handleRestart}\n          ></Counters>\n        </main>\n      </div>\n    );\n  }\n};\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"font-awesome/css/font-awesome.css\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}